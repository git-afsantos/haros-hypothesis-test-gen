{##############################################################################
 # Message Strategy Macros
 ##############################################################################}

{# Writes a statement for a custom message strategy.
    Statements can be simple assignments or assumptions, or they could be
    loops or statement blocks, in which case this macro becomes recursive. #}
{% macro _statement(statement) %}
{% if statement.is_assignment -%}
{{ statement.field }} = {{ statement.expression }}
{%- elif statement.is_assumption -%}
assume({{ statement.expression }})
{%- elif statement.is_block -%}
{% for child in statement.statements %}
{{ _statement(child) }}
{% endfor %}
{%- elif statement.is_loop -%}
for {{ statement.variable }} in {{ statement.expression }}:
{{ _statement(statement.statement)|indent(width=4, first=True) }}
{%- endif %}
{% endmacro %}


{# Builds a custom message strategy for a given package and message,
    from a given list of statements. The statements determine which values
    to assign to each field, as well as any additional constraints that
    must be satisfied. #}
{% macro custom_msg(strategy) %}
@strategies.composite
def {{ strategy.name }}(draw, trace=None):
    msg = {{ strategy.pkg }}.{{ strategy.msg }}()
{% for statement in strategy.statements %}
{{ _statement(statement)|indent(width=4, first=True) }}
{% endfor %}
    return msg

{{ strategy.name }}.is_custom_msg = True
{% endmacro %}


{##############################################################################
 # Template Body
 ##############################################################################}

{# receives:
    custom_msg_strategies: [MsgStrategy]
#}

{# type MsgStrategy
    name: string,
    args: [string],
    pkg: string,
    msg: string,
    statements: [hypothesis_ast.Statement],
    is_default: bool,
    topic: string,
    alias: string
#}

{% for strategy in custom_msg_strategies %}

    {% if not strategy.is_default %}
{{ custom_msg(strategy) }}
    {% endif %}
{% endfor %}
