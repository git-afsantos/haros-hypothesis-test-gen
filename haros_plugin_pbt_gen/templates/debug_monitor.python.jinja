#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Copyright (c) 2019 AndrÃ© Santos
#
#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.

################################################################################
# Imports
################################################################################

from builtins import range # Python 2 and 3: forward-compatible
from collections import namedtuple
from threading import Lock

from .debug_time import get_time


################################################################################
# Constants
################################################################################

inf = float("inf")
nan = float("nan")


################################################################################
# Utility
################################################################################

def do_nothing(time=None, msg=None):
    pass

def range_excluding(start, end, exclude):
    for i in range(start, end):
        if i not in exclude:
            yield i

def all_except(array, exclude):
    for i in range(len(array)):
        if i not in exclude:
            yield array[i]


################################################################################
# Runtime Verification Base Classes
################################################################################

class EventListener(object):
    __slots__ = ("active",)

    class EventListenerInstance(object):
        __slots__ = ("min_time", "max_time", "seq_start", "other_max_time",
            "state", "matches", "subsumed")

        def __init__(self, min_time, max_time, seq_start, state,
                     other_max_time=inf):
            self.min_time = min_time
            self.max_time = max_time
            self.seq_start = seq_start
            self.other_max_time = other_max_time
            self.state = state
            self.matches = 0
            self.subsumed = False

    DELAY = 0.0
    DURATION = inf

    def __init__(self):
        self.active = []

    def add(self, time, state, seq_start, other_max_time):
        self.active.append(self.EventListenerInstance(time + self.DELAY,
            time + self.DURATION, seq_start, state, other_max_time))

    def update(self, time):
        timed_out = 0
        i = len(self.active) - 1
        while i >= 0:
            e = self.active[i]
            if time >= e.max_time or time >= e.other_max_time:
                del self.active[i]
                timed_out += ((not e.subsumed and not e.matches) and 1) or 0
            i -= 1
        return timed_out

    def reset(self):
        timed_out = 0
        for e in self.active:
            timed_out += ((not e.subsumed and not e.matches) and 1) or 0
        self.active = []
        return timed_out

    def subsume(self):
        for e in self.active:
            e.subsumed = True

    def process(self, msg, time):
        return (0, self.update(time)) # (forks, timed_out)


class PropertyMonitor(object):
    __slots__ = ("lock", "active", "trigger_count", "success", "failure",
                 "on_success", "on_failure", "is_liveness", "is_safety",
                 "scope_max_time", "slack_max_time")

    def __init__(self, success_action=None, failure_action=None):
        self.lock = Lock()
        self.active = False
        self.trigger_count = 0
        self.success = 0
        self.failure = 0
        self.scope_max_time = inf
        self.slack_max_time = inf
        self.on_success = success_action or do_nothing
        self.on_failure = failure_action or do_nothing

    @property
    def at_least_once(self):
        return self.success > 0

    @property
    def has_failed(self):
        return self.failure > 0

    @property
    def triggered(self):
        return self.trigger_count > 0

    def on_launch(self, time):
        raise NotImplementedError("subclasses must override this method")

    def update(self, time):
        raise NotImplementedError("subclasses must override this method")


################################################################################
# Property Monitors
################################################################################

{% for monitor in monitors %}

{{ monitor }}

{% endfor %}

################################################################################
# Property
################################################################################

# {{ property_text }}
